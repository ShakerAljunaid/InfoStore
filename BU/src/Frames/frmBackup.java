/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Frames;

import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author Administrator
 */
public class frmBackup extends javax.swing.JFrame {

    /**
     * Creates new form frmBackup
     */
    public frmBackup() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    
    
     
    public void iterate()  {
      int num=0;
        for(int i=0;i<100;i++)
               {  num+=25;
           prgbarBackup.setValue(num);
          
            try {
            Thread.sleep(50);
          
       
        } catch (InterruptedException ex) {
           
        }
               }
           
               
    }
    
    
    //Method for backup 
    /**
     * 
     */
    public void backup() 
    {   
        
          DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
          Calendar cal = Calendar.getInstance();
          String userName=txtUserName.getText();
          String userPassword=txtPassword.getText();
          String backupPath=txtBackupPath.getText();
          String backupName=txtBackupName.getText();
          
        try {
            Process exec = null;
          try {
              exec = Runtime.getRuntime().exec("/C:/wamp/bin/mysql/mysql5.5.24/bin/mysqldump -u"+userName+" -p"+userPassword +" java_login -r "+backupPath+"/"+backupName+".sql");
          } catch (IOException ex) {
             JOptionPane.showMessageDialog(null, ex.toString(), " Error", JOptionPane.INFORMATION_MESSAGE);
          }
        
                   
             
                      //Wait for the command to complete, and check if the exit value was 0 (success)
                      if(exec.waitFor()==0)
                      {
                          //normally terminated, a way to read the output
                          InputStream inputStream = exec.getInputStream();
                          byte[] buffer = null;
              try {
                  buffer = new byte[inputStream.available()];
                  JOptionPane.showMessageDialog(null, "The backup was successfuly made", " Backup succeeded", JOptionPane.INFORMATION_MESSAGE);
              } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, ex.toString(), " Error", JOptionPane.INFORMATION_MESSAGE);
              }
              try {
                  inputStream.read(buffer);
                   
              } catch (IOException ex) {
                 JOptionPane.showMessageDialog(null, ex.toString(), " Error", JOptionPane.INFORMATION_MESSAGE);
              }

                          String str = new String(buffer);
                          System.out.println(str);
                      }
                      else
                      {
                          // abnormally terminated, there was some problem
                                      //a way to read the error during the execution of the command
                          InputStream errorStream = exec.getErrorStream();
                          byte[] buffer = null;
                try {
                  buffer = new byte[errorStream.available()];
                } catch (IOException ex) {
                  JOptionPane.showMessageDialog(null, ex.toString(), " Error", JOptionPane.INFORMATION_MESSAGE);
                 }
              try {
                  errorStream.read(buffer);
               } catch (IOException ex) {
                 JOptionPane.showMessageDialog(null, ex.toString(), " Error", JOptionPane.INFORMATION_MESSAGE);
              }

                          String str = new String(buffer);
                          System.out.println(str);

                      }
                        } catch (InterruptedException ex) {
             JOptionPane.showMessageDialog(null, ex.toString(), " Error", JOptionPane.INFORMATION_MESSAGE);
        }
                              
                              
              
            
  
    
    
    
    }
    
   
    
         
    /**
     * 
     * @return
     */
    public static String getBackUpPath() {

         String backUpPath = "";
         JFileChooser fc = null;
         if (fc == null) {
                fc = new JFileChooser();
                fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                fc.setAcceptAllFileFilterUsed(false);
        }
        int returnVal = fc.showDialog(null, "Open");
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            backUpPath = file.getAbsolutePath();
          }
        return backUpPath;
 }  
            
      //Mtethod to resize sent image      
      private ImageIcon ResizeImage(ImageIcon myimg,JLabel lbl)
       {
     //Fit the inserted picture with  the size of the label
        java.awt.Image Img=myimg.getImage();
        java.awt.Image newImg=Img.getScaledInstance(lbl.getWidth(), lbl.getHeight(),Image.SCALE_SMOOTH);
        ImageIcon image=new ImageIcon(newImg);
        
        return image;
       
        
    }//End of resize image    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton4 = new javax.swing.JButton();
        txtServerName = new javax.swing.JTextField();
        txtUserName = new javax.swing.JTextField();
        txtPassword = new javax.swing.JPasswordField();
        txtBackupName = new javax.swing.JTextField();
        txtBackupPath = new javax.swing.JTextField();
        prgbarBackup = new javax.swing.JProgressBar();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        Server = new javax.swing.JLabel();
        Server2 = new javax.swing.JLabel();
        Server1 = new javax.swing.JLabel();
        lblBG = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocationByPlatform(true);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pics/x1.jpg"))); // NOI18N
        jButton4.setToolTipText("Close");
        jButton4.setBorderPainted(false);
        jButton4.setContentAreaFilled(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 10, 30, 20));

        txtServerName.setEditable(false);
        txtServerName.setText("localhost");
        getContentPane().add(txtServerName, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 50, 240, 30));

        txtUserName.setText("Shaker");
        getContentPane().add(txtUserName, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 90, 240, 30));
        getContentPane().add(txtPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 130, 240, 30));
        getContentPane().add(txtBackupName, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 170, 240, 30));

        txtBackupPath.setText("D:/");
        getContentPane().add(txtBackupPath, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 210, 240, 30));

        prgbarBackup.setBackground(new java.awt.Color(0, 255, 153));
        prgbarBackup.setForeground(new java.awt.Color(0, 0, 255));
        prgbarBackup.setStringPainted(true);
        getContentPane().add(prgbarBackup, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 260, 390, 20));

        jButton1.setText("Backup");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 290, -1, -1));

        jButton2.setText("jButton1");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 220, 30, -1));

        jLabel5.setText("Backup to :");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 210, 70, 20));

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel4.setText("Backup Name:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 70, 20));

        Server.setText("Password :");
        getContentPane().add(Server, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, 70, 20));

        Server2.setText("User name :");
        getContentPane().add(Server2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 70, 20));

        Server1.setText("Server :");
        getContentPane().add(Server1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, 50, 20));

        lblBG.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pics/backUp.jpg"))); // NOI18N
        getContentPane().add(lblBG, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 410, 360));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        if (!"".equals(txtUserName.getText()) && !"".equals(txtPassword.getText()) && !"".equals(txtBackupName.getText())) {
            iterate();
            backup();
        } else if ("".equals(txtUserName.getText())) {
            JOptionPane.showMessageDialog(null, "User name field is empty", "Validation Error", JOptionPane.INFORMATION_MESSAGE);
        } else if ("".equals(txtPassword.getText())) {
            JOptionPane.showMessageDialog(null, "User password field is empty", "Validation Error", JOptionPane.INFORMATION_MESSAGE);
        } else if ("".equals(txtBackupName.getText())) {
            JOptionPane.showMessageDialog(null, "Backup name field is empty", "Validation Error", JOptionPane.INFORMATION_MESSAGE);
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        txtBackupPath.setText(getBackUpPath());
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmBackup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmBackup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmBackup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmBackup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new frmBackup().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Server;
    private javax.swing.JLabel Server1;
    private javax.swing.JLabel Server2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel lblBG;
    private javax.swing.JProgressBar prgbarBackup;
    private javax.swing.JTextField txtBackupName;
    private javax.swing.JTextField txtBackupPath;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtServerName;
    private javax.swing.JTextField txtUserName;
    // End of variables declaration//GEN-END:variables
}


//Trying code



                  
                              
              
             /* String host="localhost:2",user="root",pw=" ";
         File test=new File("D:\\test.sql");
      FileWriter fw=null;
      try{
      fw = new FileWriter(test);
      Runtime rt = Runtime.getRuntime();
      ProcessBuilder pb = new ProcessBuilder(
          "C:\\wamp\\bin\\mysql\\mysql5.5.24\bin\\mysqldump  -h",
          host,
          "-u",    
          user,
          "-p",
           pw,
          "info_store >",
            "D:\\inf.sql"  );
      pb.directory(new File("D:/"));
      pb. redirectErrorStream(true);
      Process p = pb.start();
      /*Process child = rt.exec("C:\\wamp\\bin\\mysql\\mysql5.5.24\bin\\mysqldump  -h"+host+" -u"+user+" -p"+pw+"  info_store >D:\\inf.sql");

      InputStream in = child.getInputStream();
      InputStreamReader xx = new InputStreamReader(in,"latin1");
      char[] chars=new char[1024];
      int ibyte=0;
      while((ibyte=xx.read(chars))>0)
      {
      fw.write(chars);
      }
      fw.close(); */
      /*}catch (Exception e) {

      e.printStackTrace();*/
              
            /*   try {
                  Process exec = Runtime.getRuntime().exec(new String[]{"cmd.exe","C:\\wamp\\bin\\mysql\\mysql5.5.24\bin\\mysqldump.exe –-user root –-password=' ' info_store > C:\\bacinf.sql;"});
                  try {
                      //Wait for the command to complete, and check if the exit value was 0 (success)
                      if(exec.waitFor()==0)
                      {
                          //normally terminated, a way to read the output
                          InputStream inputStream = exec.getInputStream();
                          byte[] buffer = new byte[inputStream.available()];
                          inputStream.read(buffer);

                          String str = new String(buffer);
                          System.out.println(str);
                      }
                      else
                      {
                          // abnormally terminated, there was some problem
                                      //a way to read the error during the execution of the command
                          InputStream errorStream = exec.getErrorStream();
                          byte[] buffer = new byte[errorStream.available()];
                          errorStream.read(buffer);

                          String str = new String(buffer);
                          System.out.println(str);

                      }
                   
                      /* String ip="localhost:2";
                      String port="3306";
                      String database="info_store";
                       String user="root";
                       String pass=" ";
                       String path="E:\\Users dbname.sql";
                       String cmd= database + " -h " + ip + " -u " + user +" -p" + pass;

                       
                      /*String dumpCommand = "mysqldump " + database + " -h " + ip + " -u " + user +" -p" + pass;
                      Runtime rt = Runtime.getRuntime();
                      File test=new File(path);
                      PrintStream ps;

                      try{
                      Process child = rt.exec(dumpCommand);
                      ps=new PrintStream(test);
                      InputStream in = child.getInputStream();
                      int ch;
                      while ((ch = in.read()) != -1) {
                      ps.write(ch);
                      System.out.write(ch); //to view it by console
                      }

                      InputStream err = child.getErrorStream();
                      while ((ch = err.read()) != -1) {
                      System.out.write(ch);
                      }
                      }catch(Exception exc) {
                      exc.printStackTrace();
                      }*/
                              
                             /* String dbName = "info_store";
                              String dbUser = "root";
                              String dbPass=" ";
                              
                              
                              Process p = null;
                                  try {
                                   
                                      Runtime runtime = Runtime.getRuntime();
                                      p = runtime.exec("C:\\wamp\\bin\\mysql\\mysql5.5.24\\bin\\mysqldump "+"-u "+dbUser+" -p"+dbPass+" "+dbName+" -r backup.sql"+" > C:\\infdb.sql");
                      //change the dbpass and dbname with your dbpass and dbname
                                      int processComplete = p.waitFor();
                       
                                      if (processComplete == 0) {
                       
                                         JOptionPane.showMessageDialog(null,"Backup taken successfully");
                       
                                      } else {
                                          JOptionPane.showMessageDialog(null,"Could not create the backup");
                                      }
                       
                       
                                  } catch (IOException | InterruptedException | HeadlessException e) {
                                      e.printStackTrace();
                                  }
                        
                              /*String dbName = "info_store";
                              String dbUser = "root";
                              String dbPass=" ";
                             /***********************************************************/
                      // Execute Shell Command
                      /***********************************************************/
                              
                          /*  String executeCmd ="" ;
                          executeCmd = "mysqldump -u "+dbUser+" -p"+dbPass+" "+dbName+" -r backup.sql";

                      Process runtimeProcess = null;
                              try {
                                  runtimeProcess = Runtime.getRuntime().exec(executeCmd);
                              } catch (IOException ex) {
                                  Logger.getLogger(Backup.class.getName()).log(Level.SEVERE, null, ex);
                              }
                      int processComplete = 0;
                              try {
                                  processComplete = runtimeProcess.waitFor();
                              } catch (InterruptedException ex) {
                                  Logger.getLogger(Backup.class.getName()).log(Level.SEVERE, null, ex);
                              }
                      if(processComplete == 0){
                      JOptionPane.showMessageDialog(null,"Backup taken successfully");
                      }
                      else {
                      JOptionPane.showMessageDialog(null,"Could not take mysql backup"); 
                      }   */
                 /* } catch (InterruptedException ex) {
                      Logger.getLogger(Backup.class.getName()).log(Level.SEVERE, null, ex);
                  }
                  
              
          /* String ip="localhost:2";
          String port="3306";
          String database="info_store";
           String user="root";
           String pass=" ";
           String path="E:\\Users dbname.sql";
           String cmd= database + " -h " + ip + " -u " + user +" -p" + pass;

           
          /*String dumpCommand = "mysqldump " + database + " -h " + ip + " -u " + user +" -p" + pass;
          Runtime rt = Runtime.getRuntime();
          File test=new File(path);
          PrintStream ps;

          try{
          Process child = rt.exec(dumpCommand);
          ps=new PrintStream(test);
          InputStream in = child.getInputStream();
          int ch;
          while ((ch = in.read()) != -1) {
          ps.write(ch);
          System.out.write(ch); //to view it by console
          }

          InputStream err = child.getErrorStream();
          while ((ch = err.read()) != -1) {
          System.out.write(ch);
          }
          }catch(Exception exc) {
          exc.printStackTrace();
          }*/
                  
                 /* String dbName = "info_store";
                  String dbUser = "root";
                  String dbPass=" ";
                  
                  
                  Process p = null;
                      try {
                       
                          Runtime runtime = Runtime.getRuntime();
                          p = runtime.exec("C:\\wamp\\bin\\mysql\\mysql5.5.24\\bin\\mysqldump "+"-u "+dbUser+" -p"+dbPass+" "+dbName+" -r backup.sql"+" > C:\\infdb.sql");
          //change the dbpass and dbname with your dbpass and dbname
                          int processComplete = p.waitFor();
           
                          if (processComplete == 0) {
           
                             JOptionPane.showMessageDialog(null,"Backup taken successfully");
           
                          } else {
                              JOptionPane.showMessageDialog(null,"Could not create the backup");
                          }
           
           
                      } catch (IOException | InterruptedException | HeadlessException e) {
                          e.printStackTrace();
                      }
                  
                  
                  /*String dbName = "info_store";
                  String dbUser = "root";
                  String dbPass=" ";
                 /***********************************************************/
          // Execute Shell Command
          /***********************************************************/
                  
              /*  String executeCmd ="" ;
              executeCmd = "mysqldump -u "+dbUser+" -p"+dbPass+" "+dbName+" -r backup.sql";

          Process runtimeProcess = null;
                  try {
                      runtimeProcess = Runtime.getRuntime().exec(executeCmd);
                  } catch (IOException ex) {
                      Logger.getLogger(Backup.class.getName()).log(Level.SEVERE, null, ex);
                  }
          int processComplete = 0;
                  try {
                      processComplete = runtimeProcess.waitFor();
                  } catch (InterruptedException ex) {
                      Logger.getLogger(Backup.class.getName()).log(Level.SEVERE, null, ex);
                  }
          if(processComplete == 0){
          JOptionPane.showMessageDialog(null,"Backup taken successfully");
          }
          else {
          JOptionPane.showMessageDialog(null,"Could not take mysql backup"); 
          }   */
             /* } catch (IOException ex) {
                  Logger.getLogger(Backup.class.getName()).log(Level.SEVERE, null, ex);
              }
              
      
      /* String ip="localhost:2";
      String port="3306";
      String database="info_store";
       String user="root";
       String pass=" ";
       String path="E:\\Users dbname.sql";
       String cmd= database + " -h " + ip + " -u " + user +" -p" + pass;

       
      /*String dumpCommand = "mysqldump " + database + " -h " + ip + " -u " + user +" -p" + pass;
      Runtime rt = Runtime.getRuntime();
      File test=new File(path);
      PrintStream ps;

      try{
      Process child = rt.exec(dumpCommand);
      ps=new PrintStream(test);
      InputStream in = child.getInputStream();
      int ch;
      while ((ch = in.read()) != -1) {
      ps.write(ch);
      System.out.write(ch); //to view it by console
      }

      InputStream err = child.getErrorStream();
      while ((ch = err.read()) != -1) {
      System.out.write(ch);
      }
      }catch(Exception exc) {
      exc.printStackTrace();
      }*/
              
             /* String dbName = "info_store";
              String dbUser = "root";
              String dbPass=" ";
              
              
              Process p = null;
                  try {
                   
                      Runtime runtime = Runtime.getRuntime();
                      p = runtime.exec("C:\\wamp\\bin\\mysql\\mysql5.5.24\\bin\\mysqldump "+"-u "+dbUser+" -p"+dbPass+" "+dbName+" -r backup.sql"+" > C:\\infdb.sql");
      //change the dbpass and dbname with your dbpass and dbname
                      int processComplete = p.waitFor();
       
                      if (processComplete == 0) {
       
                         JOptionPane.showMessageDialog(null,"Backup taken successfully");
       
                      } else {
                          JOptionPane.showMessageDialog(null,"Could not create the backup");
                      }
       
       
                  } catch (IOException | InterruptedException | HeadlessException e) {
                      e.printStackTrace();
                  }
              
        
              /*String dbName = "info_store";
              String dbUser = "root";
              String dbPass=" ";
             /***********************************************************/
      // Execute Shell Command
      /***********************************************************/
              
          /*  String executeCmd ="" ;
          executeCmd = "mysqldump -u "+dbUser+" -p"+dbPass+" "+dbName+" -r backup.sql";

      Process runtimeProcess = null;
              try {
                  runtimeProcess = Runtime.getRuntime().exec(executeCmd);
              } catch (IOException ex) {
                  Logger.getLogger(Backup.class.getName()).log(Level.SEVERE, null, ex);
              }
      int processComplete = 0;
              try {
                  processComplete = runtimeProcess.waitFor();
              } catch (InterruptedException ex) {
                  Logger.getLogger(Backup.class.getName()).log(Level.SEVERE, null, ex);
              }
      if(processComplete == 0){
      JOptionPane.showMessageDialog(null,"Backup taken successfully");
      }
      else {
      JOptionPane.showMessageDialog(null,"Could not take mysql backup"); 
      }   */   /*   } catch (InterruptedException ex) {
                      Logger.getLogger(Backup.class.getName()).log(Level.SEVERE, null, ex);
                  }*/
                                      
                                      
                      
                     /* String host="localhost:2",user="root",pw=" ";
                 File test=new File("D:\\test.sql");
              FileWriter fw=null;
              try{
              fw = new FileWriter(test);
              Runtime rt = Runtime.getRuntime();
              ProcessBuilder pb = new ProcessBuilder(
                  "C:\\wamp\\bin\\mysql\\mysql5.5.24\bin\\mysqldump  -h",
                  host,
                  "-u",    
                  user,
                  "-p",
                   pw,
                  "info_store >",
                    "D:\\inf.sql"  );
              pb.directory(new File("D:/"));
              pb. redirectErrorStream(true);
              Process p = pb.start();
              /*Process child = rt.exec("C:\\wamp\\bin\\mysql\\mysql5.5.24\bin\\mysqldump  -h"+host+" -u"+user+" -p"+pw+"  info_store >D:\\inf.sql");

              InputStream in = child.getInputStream();
              InputStreamReader xx = new InputStreamReader(in,"latin1");
              char[] chars=new char[1024];
              int ibyte=0;
              while((ibyte=xx.read(chars))>0)
              {
              fw.write(chars);
              }
              fw.close(); */
              /*}catch (Exception e) {

              e.printStackTrace();*/
                      
                    /*   try {
                          Process exec = Runtime.getRuntime().exec(new String[]{"cmd.exe","C:\\wamp\\bin\\mysql\\mysql5.5.24\bin\\mysqldump.exe –-user root –-password=' ' info_store > C:\\bacinf.sql;"});
                          try {
                              //Wait for the command to complete, and check if the exit value was 0 (success)
                              if(exec.waitFor()==0)
                              {
                                  //normally terminated, a way to read the output
                                  InputStream inputStream = exec.getInputStream();
                                  byte[] buffer = new byte[inputStream.available()];
                                  inputStream.read(buffer);

                                  String str = new String(buffer);
                                  System.out.println(str);
                              }
                              else
                              {
                                  // abnormally terminated, there was some problem
                                              //a way to read the error during the execution of the command
                                  InputStream errorStream = exec.getErrorStream();
                                  byte[] buffer = new byte[errorStream.available()];
                                  errorStream.read(buffer);

                                  String str = new String(buffer);
                                  System.out.println(str);

                              }
                       
                              /* String ip="localhost:2";
                              String port="3306";
                              String database="info_store";
                               String user="root";
                               String pass=" ";
                               String path="E:\\Users dbname.sql";
                               String cmd= database + " -h " + ip + " -u " + user +" -p" + pass;

                               
                              /*String dumpCommand = "mysqldump " + database + " -h " + ip + " -u " + user +" -p" + pass;
                              Runtime rt = Runtime.getRuntime();
                              File test=new File(path);
                              PrintStream ps;

                              try{
                              Process child = rt.exec(dumpCommand);
                              ps=new PrintStream(test);
                              InputStream in = child.getInputStream();
                              int ch;
                              while ((ch = in.read()) != -1) {
                              ps.write(ch);
                              System.out.write(ch); //to view it by console
                              }

                              InputStream err = child.getErrorStream();
                              while ((ch = err.read()) != -1) {
                              System.out.write(ch);
                              }
                              }catch(Exception exc) {
                              exc.printStackTrace();
                              }*/
                                      
                                     /* String dbName = "info_store";
                                      String dbUser = "root";
                                      String dbPass=" ";
                                      
                                      
                                      Process p = null;
                                          try {
                                           
                                              Runtime runtime = Runtime.getRuntime();
                                              p = runtime.exec("C:\\wamp\\bin\\mysql\\mysql5.5.24\\bin\\mysqldump "+"-u "+dbUser+" -p"+dbPass+" "+dbName+" -r backup.sql"+" > C:\\infdb.sql");
                              //change the dbpass and dbname with your dbpass and dbname
                                              int processComplete = p.waitFor();
                               
                                              if (processComplete == 0) {
                               
                                                 JOptionPane.showMessageDialog(null,"Backup taken successfully");
                               
                                              } else {
                                                  JOptionPane.showMessageDialog(null,"Could not create the backup");
                                              }
                               
                               
                                          } catch (IOException | InterruptedException | HeadlessException e) {
                                              e.printStackTrace();
                             
                                      /*String dbName = "info_store";
                                      String dbUser = "root";
                                      String dbPass=" ";
                                     /***********************************************************/
                              // Execute Shell Command
                              /***********************************************************/
                                      
                                  /*  String executeCmd ="" ;
                                  executeCmd = "mysqldump -u "+dbUser+" -p"+dbPass+" "+dbName+" -r backup.sql";

                              Process runtimeProcess = null;
                                      try {
                                          runtimeProcess = Runtime.getRuntime().exec(executeCmd);
                                      } catch (IOException ex) {
                                          Logger.getLogger(Backup.class.getName()).log(Level.SEVERE, null, ex);
                                      }
                              int processComplete = 0;
                                      try {
                                          processComplete = runtimeProcess.waitFor();
                                      } catch (InterruptedException ex) {
                                          Logger.getLogger(Backup.class.getName()).log(Level.SEVERE, null, ex);
                                      }
                              if(processComplete == 0){
                              JOptionPane.showMessageDialog(null,"Backup taken successfully");
                              }
                              else {
                              JOptionPane.showMessageDialog(null,"Could not take mysql backup"); 
                              }   */
                         /* } catch (InterruptedException ex) {
                              Logger.getLogger(Backup.class.getName()).log(Level.SEVERE, null, ex);
                          }             
                         */ 
                          
                     
                  /* String ip="localhost:2";
                  String port="3306";
                  String database="info_store";
                   String user="root";
                   String pass=" ";
                   String path="E:\\Users dbname.sql";
                   String cmd= database + " -h " + ip + " -u " + user +" -p" + pass;

                   
                  /*String dumpCommand = "mysqldump " + database + " -h " + ip + " -u " + user +" -p" + pass;
                  Runtime rt = Runtime.getRuntime();
                  File test=new File(path);
                  PrintStream ps;

                  try{
                  Process child = rt.exec(dumpCommand);
                  ps=new PrintStream(test);
                  InputStream in = child.getInputStream();
                  int ch;
                  while ((ch = in.read()) != -1) {
                  ps.write(ch);
                  System.out.write(ch); //to view it by console
                  }

                  InputStream err = child.getErrorStream();
                  while ((ch = err.read()) != -1) {
                  System.out.write(ch);
                  }
                  }catch(Exception exc) {
                  exc.printStackTrace();
                  }*/
                          
                         /* String dbName = "info_store";
                          String dbUser = "root";
                          String dbPass=" ";
                          
                          
                          Process p = null;
                              try {
                               
                                  Runtime runtime = Runtime.getRuntime();
                                  p = runtime.exec("C:\\wamp\\bin\\mysql\\mysql5.5.24\\bin\\mysqldump "+"-u "+dbUser+" -p"+dbPass+" "+dbName+" -r backup.sql"+" > C:\\infdb.sql");
                  //change the dbpass and dbname with your dbpass and dbname
                                  int processComplete = p.waitFor();
                   
                                  if (processComplete == 0) {
                   
                                     JOptionPane.showMessageDialog(null,"Backup taken successfully");
                   
                                  } else {
                                      JOptionPane.showMessageDialog(null,"Could not create the backup");
                                  }
                   
                   
                              } catch (IOException | InterruptedException | HeadlessException e) {
                                  e.printStackTrace();
                              }
                         
                          /*String dbName = "info_store";
                          String dbUser = "root";
                          String dbPass=" ";
                         /***********************************************************/
                  // Execute Shell Command
                  /***********************************************************/
                          
                      /*  String executeCmd ="" ;
                      executeCmd = "mysqldump -u "+dbUser+" -p"+dbPass+" "+dbName+" -r backup.sql";

                  Process runtimeProcess = null;
                          try {
                              runtimeProcess = Runtime.getRuntime().exec(executeCmd);
                          } catch (IOException ex) {
                              Logger.getLogger(Backup.class.getName()).log(Level.SEVERE, null, ex);
                          }
                  int processComplete = 0;
                          try {
                              processComplete = runtimeProcess.waitFor();
                          } catch (InterruptedException ex) {
                              Logger.getLogger(Backup.class.getName()).log(Level.SEVERE, null, ex);
                          }
                  if(processComplete == 0){
                  JOptionPane.showMessageDialog(null,"Backup taken successfully");
                  }
                  else {
                  JOptionPane.showMessageDialog(null,"Could not take mysql backup"); 
                  }   */
                     /* } catch (IOException ex) {
                          Logger.getLogger(Backup.class.getName()).log(Level.SEVERE, null, ex);
                      }
              
              /* String ip="localhost:2";
              String port="3306";
              String database="info_store";
               String user="root";
               String pass=" ";
               String path="E:\\Users dbname.sql";
               String cmd= database + " -h " + ip + " -u " + user +" -p" + pass;

               
              /*String dumpCommand = "mysqldump " + database + " -h " + ip + " -u " + user +" -p" + pass;
              Runtime rt = Runtime.getRuntime();
              File test=new File(path);
              PrintStream ps;

              try{
              Process child = rt.exec(dumpCommand);
              ps=new PrintStream(test);
              InputStream in = child.getInputStream();
              int ch;
              while ((ch = in.read()) != -1) {
              ps.write(ch);
              System.out.write(ch); //to view it by console
              }

              InputStream err = child.getErrorStream();
              while ((ch = err.read()) != -1) {
              System.out.write(ch);
              }
              }catch(Exception exc) {
              exc.printStackTrace();
              }*/
                      
                     /* String dbName = "info_store";
                      String dbUser = "root";
                      String dbPass=" ";
                      
                      
                      Process p = null;
                          try {
                           
                              Runtime runtime = Runtime.getRuntime();
                              p = runtime.exec("C:\\wamp\\bin\\mysql\\mysql5.5.24\\bin\\mysqldump "+"-u "+dbUser+" -p"+dbPass+" "+dbName+" -r backup.sql"+" > C:\\infdb.sql");
              //change the dbpass and dbname with your dbpass and dbname
                              int processComplete = p.waitFor();
               
                              if (processComplete == 0) {
               
                                 JOptionPane.showMessageDialog(null,"Backup taken successfully");
               
                              } else {
                                  JOptionPane.showMessageDialog(null,"Could not create the backup");
                              }
               
               
                          } catch (IOException | InterruptedException | HeadlessException e) {
                              e.printStackTrace();
                          }
                      
                      
                      /*String dbName = "info_store";
                      String dbUser = "root";
                      String dbPass=" ";
                     /***********************************************************/
              // Execute Shell Command
              /***********************************************************/
                      
                  /*  String executeCmd ="" ;
                  executeCmd = "mysqldump -u "+dbUser+" -p"+dbPass+" "+dbName+" -r backup.sql";

              Process runtimeProcess = null;
                      try {
                          runtimeProcess = Runtime.getRuntime().exec(executeCmd);
                      } catch (IOException ex) {
                          Logger.getLogger(Backup.class.getName()).log(Level.SEVERE, null, ex);
                      }
              int processComplete = 0;
                      try {
                          processComplete = runtimeProcess.waitFor();
                      } catch (InterruptedException ex) {
                          Logger.getLogger(Backup.class.getName()).log(Level.SEVERE, null, ex);
                      }
              if(processComplete == 0){
              JOptionPane.showMessageDialog(null,"Backup taken successfully");
              }
              else {
              JOptionPane.showMessageDialog(null,"Could not take mysql backup"); 
              }   */
        /*  } catch (IOException ex) {
              Logger.getLogger(Backup.class.getName()).log(Level.SEVERE, null, ex);
          }*/
      
          
                            
            
           /* String host="localhost:2",user="root",pw=" ";
       File test=new File("D:\\test.sql");
    FileWriter fw=null;
    try{
    fw = new FileWriter(test);
    Runtime rt = Runtime.getRuntime();
    ProcessBuilder pb = new ProcessBuilder(
        "C:\\wamp\\bin\\mysql\\mysql5.5.24\bin\\mysqldump  -h",
        host,
        "-u",    
        user,
        "-p",
         pw,
        "info_store >",
          "D:\\inf.sql"  );
    pb.directory(new File("D:/"));
    pb. redirectErrorStream(true);
    Process p = pb.start();
    /*Process child = rt.exec("C:\\wamp\\bin\\mysql\\mysql5.5.24\bin\\mysqldump  -h"+host+" -u"+user+" -p"+pw+"  info_store >D:\\inf.sql");

    InputStream in = child.getInputStream();
    InputStreamReader xx = new InputStreamReader(in,"latin1");
    char[] chars=new char[1024];
    int ibyte=0;
    while((ibyte=xx.read(chars))>0)
    {
    fw.write(chars);
    }
    fw.close(); */
    /*}catch (Exception e) {

    e.printStackTrace();*/
            
          /*   try {
                Process exec = Runtime.getRuntime().exec(new String[]{"cmd.exe","C:\\wamp\\bin\\mysql\\mysql5.5.24\bin\\mysqldump.exe –-user root –-password=' ' info_store > C:\\bacinf.sql;"});
                try {
                    //Wait for the command to complete, and check if the exit value was 0 (success)
                    if(exec.waitFor()==0)
                    {
                        //normally terminated, a way to read the output
                        InputStream inputStream = exec.getInputStream();
                        byte[] buffer = new byte[inputStream.available()];
                        inputStream.read(buffer);

                        String str = new String(buffer);
                        System.out.println(str);
                    }
                    else
                    {
                        // abnormally terminated, there was some problem
                                    //a way to read the error during the execution of the command
                        InputStream errorStream = exec.getErrorStream();
                        byte[] buffer = new byte[errorStream.available()];
                        errorStream.read(buffer);

                        String str = new String(buffer);
                        System.out.println(str);

                    }
                 
                    /* String ip="localhost:2";
                    String port="3306";
                    String database="info_store";
                     String user="root";
                     String pass=" ";
                     String path="E:\\Users dbname.sql";
                     String cmd= database + " -h " + ip + " -u " + user +" -p" + pass;

                     
                    /*String dumpCommand = "mysqldump " + database + " -h " + ip + " -u " + user +" -p" + pass;
                    Runtime rt = Runtime.getRuntime();
                    File test=new File(path);
                    PrintStream ps;

                    try{
                    Process child = rt.exec(dumpCommand);
                    ps=new PrintStream(test);
                    InputStream in = child.getInputStream();
                    int ch;
                    while ((ch = in.read()) != -1) {
                    ps.write(ch);
                    System.out.write(ch); //to view it by console
                    }

                    InputStream err = child.getErrorStream();
                    while ((ch = err.read()) != -1) {
                    System.out.write(ch);
                    }
                    }catch(Exception exc) {
                    exc.printStackTrace();
                    }*/
                            
                           /* String dbName = "info_store";
                            String dbUser = "root";
                            String dbPass=" ";
                            
                            
                            Process p = null;
                                try {
                                 
                                    Runtime runtime = Runtime.getRuntime();
                                    p = runtime.exec("C:\\wamp\\bin\\mysql\\mysql5.5.24\\bin\\mysqldump "+"-u "+dbUser+" -p"+dbPass+" "+dbName+" -r backup.sql"+" > C:\\infdb.sql");
                    //change the dbpass and dbname with your dbpass and dbname
                                    int processComplete = p.waitFor();
                     
                                    if (processComplete == 0) {
                     
                                       JOptionPane.showMessageDialog(null,"Backup taken successfully");
                     
                                    } else {
                                        JOptionPane.showMessageDialog(null,"Could not create the backup");
                                    }
                     
                     
                                } catch (IOException | InterruptedException | HeadlessException e) {
                                    e.printStackTrace();
                                }
                            
                                                    
                            /*String dbName = "info_store";
                            String dbUser = "root";
                            String dbPass=" ";
                           /***********************************************************/
                    // Execute Shell Command
                    /***********************************************************/
                            
                        /*  String executeCmd ="" ;
                        executeCmd = "mysqldump -u "+dbUser+" -p"+dbPass+" "+dbName+" -r backup.sql";

                    Process runtimeProcess = null;
                            try {
                                runtimeProcess = Runtime.getRuntime().exec(executeCmd);
                            } catch (IOException ex) {
                                Logger.getLogger(Backup.class.getName()).log(Level.SEVERE, null, ex);
                            }
                    int processComplete = 0;
                            try {
                                processComplete = runtimeProcess.waitFor();
                            } catch (InterruptedException ex) {
                                Logger.getLogger(Backup.class.getName()).log(Level.SEVERE, null, ex);
                            }
                    if(processComplete == 0){
                    JOptionPane.showMessageDialog(null,"Backup taken successfully");
                    }
                    else {
                    JOptionPane.showMessageDialog(null,"Could not take mysql backup"); 
                    }   */
               /* } catch (InterruptedException ex) {
                    Logger.getLogger(Backup.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                
                
               */ 
                
           
        /* String ip="localhost:2";
        String port="3306";
        String database="info_store";
         String user="root";
         String pass=" ";
         String path="E:\\Users dbname.sql";
         String cmd= database + " -h " + ip + " -u " + user +" -p" + pass;

         
        /*String dumpCommand = "mysqldump " + database + " -h " + ip + " -u " + user +" -p" + pass;
        Runtime rt = Runtime.getRuntime();
        File test=new File(path);
        PrintStream ps;

        try{
        Process child = rt.exec(dumpCommand);
        ps=new PrintStream(test);
        InputStream in = child.getInputStream();
        int ch;
        while ((ch = in.read()) != -1) {
        ps.write(ch);
        System.out.write(ch); //to view it by console
        }

        InputStream err = child.getErrorStream();
        while ((ch = err.read()) != -1) {
        System.out.write(ch);
        }
        }catch(Exception exc) {
        exc.printStackTrace();
        }*/
                
               /* String dbName = "info_store";
                String dbUser = "root";
                String dbPass=" ";
                
                
                Process p = null;
                    try {
                     
                        Runtime runtime = Runtime.getRuntime();
                        p = runtime.exec("C:\\wamp\\bin\\mysql\\mysql5.5.24\\bin\\mysqldump "+"-u "+dbUser+" -p"+dbPass+" "+dbName+" -r backup.sql"+" > C:\\infdb.sql");
        //change the dbpass and dbname with your dbpass and dbname
                        int processComplete = p.waitFor();
         
                        if (processComplete == 0) {
         
                           JOptionPane.showMessageDialog(null,"Backup taken successfully");
         
                        } else {
                            JOptionPane.showMessageDialog(null,"Could not create the backup");
                        }
         
         
                    } catch (IOException | InterruptedException | HeadlessException e) {
                        e.printStackTrace();
                    }
                
                
                
                
                
                
                
                
                /*String dbName = "info_store";
                String dbUser = "root";
                String dbPass=" ";
               /***********************************************************/
        // Execute Shell Command
        /***********************************************************/
                
            /*  String executeCmd ="" ;
            executeCmd = "mysqldump -u "+dbUser+" -p"+dbPass+" "+dbName+" -r backup.sql";

        Process runtimeProcess = null;
                try {
                    runtimeProcess = Runtime.getRuntime().exec(executeCmd);
                } catch (IOException ex) {
                    Logger.getLogger(Backup.class.getName()).log(Level.SEVERE, null, ex);
                }
        int processComplete = 0;
                try {
                    processComplete = runtimeProcess.waitFor();
                } catch (InterruptedException ex) {
                    Logger.getLogger(Backup.class.getName()).log(Level.SEVERE, null, ex);
                }
        if(processComplete == 0){
        JOptionPane.showMessageDialog(null,"Backup taken successfully");
        }
        else {
        JOptionPane.showMessageDialog(null,"Could not take mysql backup"); 
        }   */
           /* } catch (IOException ex) {
                Logger.getLogger(Backup.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
    /* String ip="localhost:2";
    String port="3306";
    String database="info_store";
     String user="root";
     String pass=" ";
     String path="E:\\Users dbname.sql";
     String cmd= database + " -h " + ip + " -u " + user +" -p" + pass;

     
    /*String dumpCommand = "mysqldump " + database + " -h " + ip + " -u " + user +" -p" + pass;
    Runtime rt = Runtime.getRuntime();
    File test=new File(path);
    PrintStream ps;

    try{
    Process child = rt.exec(dumpCommand);
    ps=new PrintStream(test);
    InputStream in = child.getInputStream();
    int ch;
    while ((ch = in.read()) != -1) {
    ps.write(ch);
    System.out.write(ch); //to view it by console
    }

    InputStream err = child.getErrorStream();
    while ((ch = err.read()) != -1) {
    System.out.write(ch);
    }
    }catch(Exception exc) {
    exc.printStackTrace();
    }*/
            
           /* String dbName = "info_store";
            String dbUser = "root";
            String dbPass=" ";
            
            
            Process p = null;
                try {
                 
                    Runtime runtime = Runtime.getRuntime();
                    p = runtime.exec("C:\\wamp\\bin\\mysql\\mysql5.5.24\\bin\\mysqldump "+"-u "+dbUser+" -p"+dbPass+" "+dbName+" -r backup.sql"+" > C:\\infdb.sql");
    //change the dbpass and dbname with your dbpass and dbname
                    int processComplete = p.waitFor();
     
                    if (processComplete == 0) {
     
                       JOptionPane.showMessageDialog(null,"Backup taken successfully");
     
                    } else {
                        JOptionPane.showMessageDialog(null,"Could not create the backup");
                    }
     
     
                } catch (IOException | InterruptedException | HeadlessException e) {
                    e.printStackTrace();
                }
            
            
            
            
            
            
            
            
            /*String dbName = "info_store";
            String dbUser = "root";
            String dbPass=" ";
           /***********************************************************/
    // Execute Shell Command
    /***********************************************************/
            
        /*  String executeCmd ="" ;
        executeCmd = "mysqldump -u "+dbUser+" -p"+dbPass+" "+dbName+" -r backup.sql";

    Process runtimeProcess = null;
            try {
                runtimeProcess = Runtime.getRuntime().exec(executeCmd);
            } catch (IOException ex) {
                Logger.getLogger(Backup.class.getName()).log(Level.SEVERE, null, ex);
            }
    int processComplete = 0;
            try {
                processComplete = runtimeProcess.waitFor();
            } catch (InterruptedException ex) {
                Logger.getLogger(Backup.class.getName()).log(Level.SEVERE, null, ex);
            }
    if(processComplete == 0){
    JOptionPane.showMessageDialog(null,"Backup taken successfully");
    }
    else {
    JOptionPane.showMessageDialog(null,"Could not take mysql backup"); 
    }   */   /*   } catch (InterruptedException ex) {
                    Logger.getLogger(Backup.class.getName()).log(Level.SEVERE, null, ex);
                }*/
                                    
                                    
                    
                   /* String host="localhost:2",user="root",pw=" ";
               File test=new File("D:\\test.sql");
            FileWriter fw=null;
            try{
            fw = new FileWriter(test);
            Runtime rt = Runtime.getRuntime();
            ProcessBuilder pb = new ProcessBuilder(
                "C:\\wamp\\bin\\mysql\\mysql5.5.24\bin\\mysqldump  -h",
                host,
                "-u",    
                user,
                "-p",
                 pw,
                "info_store >",
                  "D:\\inf.sql"  );
            pb.directory(new File("D:/"));
            pb. redirectErrorStream(true);
            Process p = pb.start();
            /*Process child = rt.exec("C:\\wamp\\bin\\mysql\\mysql5.5.24\bin\\mysqldump  -h"+host+" -u"+user+" -p"+pw+"  info_store >D:\\inf.sql");

            InputStream in = child.getInputStream();
            InputStreamReader xx = new InputStreamReader(in,"latin1");
            char[] chars=new char[1024];
            int ibyte=0;
            while((ibyte=xx.read(chars))>0)
            {
            fw.write(chars);
            }
            fw.close(); */
            /*}catch (Exception e) {

            e.printStackTrace();*/
                    
                  /*   try {
                        Process exec = Runtime.getRuntime().exec(new String[]{"cmd.exe","C:\\wamp\\bin\\mysql\\mysql5.5.24\bin\\mysqldump.exe –-user root –-password=' ' info_store > C:\\bacinf.sql;"});
                        try {
                            //Wait for the command to complete, and check if the exit value was 0 (success)
                            if(exec.waitFor()==0)
                            {
                                //normally terminated, a way to read the output
                                InputStream inputStream = exec.getInputStream();
                                byte[] buffer = new byte[inputStream.available()];
                                inputStream.read(buffer);

                                String str = new String(buffer);
                                System.out.println(str);
                            }
                            else
                            {
                                // abnormally terminated, there was some problem
                                            //a way to read the error during the execution of the command
                                InputStream errorStream = exec.getErrorStream();
                                byte[] buffer = new byte[errorStream.available()];
                                errorStream.read(buffer);

                                String str = new String(buffer);
                                System.out.println(str);

                            }
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                            /* String ip="localhost:2";
                            String port="3306";
                            String database="info_store";
                             String user="root";
                             String pass=" ";
                             String path="E:\\Users dbname.sql";
                             String cmd= database + " -h " + ip + " -u " + user +" -p" + pass;

                             
                            /*String dumpCommand = "mysqldump " + database + " -h " + ip + " -u " + user +" -p" + pass;
                            Runtime rt = Runtime.getRuntime();
                            File test=new File(path);
                            PrintStream ps;

                            try{
                            Process child = rt.exec(dumpCommand);
                            ps=new PrintStream(test);
                            InputStream in = child.getInputStream();
                            int ch;
                            while ((ch = in.read()) != -1) {
                            ps.write(ch);
                            System.out.write(ch); //to view it by console
                            }

                            InputStream err = child.getErrorStream();
                            while ((ch = err.read()) != -1) {
                            System.out.write(ch);
                            }
                            }catch(Exception exc) {
                            exc.printStackTrace();
                            }*/
                                    
                                   /* String dbName = "info_store";
                                    String dbUser = "root";
                                    String dbPass=" ";
                                    
                                    
                                    Process p = null;
                                        try {
                                         
                                            Runtime runtime = Runtime.getRuntime();
                                            p = runtime.exec("C:\\wamp\\bin\\mysql\\mysql5.5.24\\bin\\mysqldump "+"-u "+dbUser+" -p"+dbPass+" "+dbName+" -r backup.sql"+" > C:\\infdb.sql");
                            //change the dbpass and dbname with your dbpass and dbname
                                            int processComplete = p.waitFor();
                             
                                            if (processComplete == 0) {
                             
                                               JOptionPane.showMessageDialog(null,"Backup taken successfully");
                             
                                            } else {
                                                JOptionPane.showMessageDialog(null,"Could not create the backup");
                                            }
                             
                             
                                        } catch (IOException | InterruptedException | HeadlessException e) {
                                            e.printStackTrace();
                                        }
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    /*String dbName = "info_store";
                                    String dbUser = "root";
                                    String dbPass=" ";
                                   /***********************************************************/
                            // Execute Shell Command
                            /***********************************************************/
                                    
                                /*  String executeCmd ="" ;
                                executeCmd = "mysqldump -u "+dbUser+" -p"+dbPass+" "+dbName+" -r backup.sql";

                            Process runtimeProcess = null;
                                    try {
                                        runtimeProcess = Runtime.getRuntime().exec(executeCmd);
                                    } catch (IOException ex) {
                                        Logger.getLogger(Backup.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                            int processComplete = 0;
                                    try {
                                        processComplete = runtimeProcess.waitFor();
                                    } catch (InterruptedException ex) {
                                        Logger.getLogger(Backup.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                            if(processComplete == 0){
                            JOptionPane.showMessageDialog(null,"Backup taken successfully");
                            }
                            else {
                            JOptionPane.showMessageDialog(null,"Could not take mysql backup"); 
                            }   */
                       /* } catch (InterruptedException ex) {
                            Logger.getLogger(Backup.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        
                        
                        
                       */ 
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                /* String ip="localhost:2";
                String port="3306";
                String database="info_store";
                 String user="root";
                 String pass=" ";
                 String path="E:\\Users dbname.sql";
                 String cmd= database + " -h " + ip + " -u " + user +" -p" + pass;

                 
                /*String dumpCommand = "mysqldump " + database + " -h " + ip + " -u " + user +" -p" + pass;
                Runtime rt = Runtime.getRuntime();
                File test=new File(path);
                PrintStream ps;

                try{
                Process child = rt.exec(dumpCommand);
                ps=new PrintStream(test);
                InputStream in = child.getInputStream();
                int ch;
                while ((ch = in.read()) != -1) {
                ps.write(ch);
                System.out.write(ch); //to view it by console
                }

                InputStream err = child.getErrorStream();
                while ((ch = err.read()) != -1) {
                System.out.write(ch);
                }
                }catch(Exception exc) {
                exc.printStackTrace();
                }*/
                        
                       /* String dbName = "info_store";
                        String dbUser = "root";
                        String dbPass=" ";
                        
                        
                        Process p = null;
                            try {
                             
                                Runtime runtime = Runtime.getRuntime();
                                p = runtime.exec("C:\\wamp\\bin\\mysql\\mysql5.5.24\\bin\\mysqldump "+"-u "+dbUser+" -p"+dbPass+" "+dbName+" -r backup.sql"+" > C:\\infdb.sql");
                //change the dbpass and dbname with your dbpass and dbname
                                int processComplete = p.waitFor();
                 
                                if (processComplete == 0) {
                 
                                   JOptionPane.showMessageDialog(null,"Backup taken successfully");
                 
                                } else {
                                    JOptionPane.showMessageDialog(null,"Could not create the backup");
                                }
                 
                 
                            } catch (IOException | InterruptedException | HeadlessException e) {
                                e.printStackTrace();
                            }
                        
                        
                        
                        
                        
                        
                        
                        
                        /*String dbName = "info_store";
                        String dbUser = "root";
                        String dbPass=" ";
                       /***********************************************************/
                // Execute Shell Command
                /***********************************************************/
                        
                    /*  String executeCmd ="" ;
                    executeCmd = "mysqldump -u "+dbUser+" -p"+dbPass+" "+dbName+" -r backup.sql";

                Process runtimeProcess = null;
                        try {
                            runtimeProcess = Runtime.getRuntime().exec(executeCmd);
                        } catch (IOException ex) {
                            Logger.getLogger(Backup.class.getName()).log(Level.SEVERE, null, ex);
                        }
                int processComplete = 0;
                        try {
                            processComplete = runtimeProcess.waitFor();
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Backup.class.getName()).log(Level.SEVERE, null, ex);
                        }
                if(processComplete == 0){
                JOptionPane.showMessageDialog(null,"Backup taken successfully");
                }
                else {
                JOptionPane.showMessageDialog(null,"Could not take mysql backup"); 
                }   */
                   /* } catch (IOException ex) {
                        Logger.getLogger(Backup.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
            /* String ip="localhost:2";
            String port="3306";
            String database="info_store";
             String user="root";
             String pass=" ";
             String path="E:\\Users dbname.sql";
             String cmd= database + " -h " + ip + " -u " + user +" -p" + pass;

             
            /*String dumpCommand = "mysqldump " + database + " -h " + ip + " -u " + user +" -p" + pass;
            Runtime rt = Runtime.getRuntime();
            File test=new File(path);
            PrintStream ps;

            try{
            Process child = rt.exec(dumpCommand);
            ps=new PrintStream(test);
            InputStream in = child.getInputStream();
            int ch;
            while ((ch = in.read()) != -1) {
            ps.write(ch);
            System.out.write(ch); //to view it by console
            }

            InputStream err = child.getErrorStream();
            while ((ch = err.read()) != -1) {
            System.out.write(ch);
            }
            }catch(Exception exc) {
            exc.printStackTrace();
            }*/
                    
                   /* String dbName = "info_store";
                    String dbUser = "root";
                    String dbPass=" ";
                    
                    
                    Process p = null;
                        try {
                         
                            Runtime runtime = Runtime.getRuntime();
                            p = runtime.exec("C:\\wamp\\bin\\mysql\\mysql5.5.24\\bin\\mysqldump "+"-u "+dbUser+" -p"+dbPass+" "+dbName+" -r backup.sql"+" > C:\\infdb.sql");
            //change the dbpass and dbname with your dbpass and dbname
                            int processComplete = p.waitFor();
             
                            if (processComplete == 0) {
             
                               JOptionPane.showMessageDialog(null,"Backup taken successfully");
             
                            } else {
                                JOptionPane.showMessageDialog(null,"Could not create the backup");
                            }
             
             
                        } catch (IOException | InterruptedException | HeadlessException e) {
                            e.printStackTrace();
                        }
                    
                    
                    
                    
                    
                    
                    
                    
                    /*String dbName = "info_store";
                    String dbUser = "root";
                    String dbPass=" ";
                   /***********************************************************/
            // Execute Shell Command
            /***********************************************************/
                    
                /*  String executeCmd ="" ;
                executeCmd = "mysqldump -u "+dbUser+" -p"+dbPass+" "+dbName+" -r backup.sql";

            Process runtimeProcess = null;
                    try {
                        runtimeProcess = Runtime.getRuntime().exec(executeCmd);
                    } catch (IOException ex) {
                        Logger.getLogger(Backup.class.getName()).log(Level.SEVERE, null, ex);
                    }
            int processComplete = 0;
                    try {
                        processComplete = runtimeProcess.waitFor();
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Backup.class.getName()).log(Level.SEVERE, null, ex);
                    }
            if(processComplete == 0){
            JOptionPane.showMessageDialog(null,"Backup taken successfully");
            }
            else {
            JOptionPane.showMessageDialog(null,"Could not take mysql backup"); 
            }   */
      /*  } catch (IOException ex) {
            Logger.getLogger(Backup.class.getName()).log(Level.SEVERE, null, ex);
        }*/



